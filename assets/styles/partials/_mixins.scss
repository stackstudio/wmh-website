/* ==========================================================================
   Mixins
   ========================================================================== */

/*
 * Mixin for easy media queries
 * @include bp(tablet) { SCSS here };
*/
@mixin bp($point) {
	@if $point == biggie {
		@media (max-width : 1600px) { @content; }
	}
	@if $point == tablet {
		@media (max-width : 1024px) { @content; }
	}
	@else if $point == phone {
		@media (max-width : 768px) { @content; }
	}
}

/*
 * Mixin for clearfix
 * @include clearfix;
*/
@mixin clearfix {
	&:before,
	&:after {
	    content: " "; /* 1 */
	    display: table; /* 2 */
	}

	&:after {
	    clear: both;
	}
}

/*
 * Mixin for basic CSS triangles
 * @include triangle(up, #000, 50px)
*/
@mixin triangle($direction:up, $color:#000, $size:100px) {
	@if($direction == up) {
		border-color: transparent transparent $color;
		border-style: solid;
		border-width: 0 $size $size;
		height: 0;
		width: 0;
	}
	@if($direction == down) {
		border-color: $color transparent transparent transparent;
		border-style: solid;
		border-width: $size;
		height:0;
		width:0;
	}
	@if($direction == left) {
		border-color: transparent $color transparent transparent;
		border-style: solid;
		border-width: $size $size $size 0;
		height: 0;
		width: 0;
	}
	@if($direction == right) {
		border-color: transparent transparent transparent $color;
		border-style: solid;
		border-width: $size 0 $size $size;
		height:0;
		width:0;
	}
}

/*
 * Mixin for opacity
 * @include opacity;
*/
@mixin opacity($opacity, $force: true) {
	@if $force == 'true' {
		opacity: $opacity !important;
		$opacity-ie: $opacity * 100 !important;
		filter: alpha(opacity=$opacity-ie) !important; //IE8
	} @else {
	  opacity: $opacity;
	  $opacity-ie: $opacity * 100;
	  filter: alpha(opacity=$opacity-ie); //IE8
	}
}


/*
 * Mixin for rem sizes
 * @include font-size($size);
*/
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

/*
 * @font-face mixin
 * @include fontface('family', 'assets/fonts/', 'myfontname');
 */

@mixin fontface($font-family, $font-url, $font-name) {
	@font-face {
		font: {
			family: $font-family;
			style: normal;
			weight: normal;
		}
		src: url($font-url + '/' + $font-name + '.eot');
		src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
			 url($font-url + '/' + $font-name + '.woff') format('woff'),
			 url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
			 url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
	}
}


@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $left $top $blur $color;
    -moz-box-shadow:inset $left $top $blur $color;
    box-shadow:inset $left $top $blur $color;
  } @else {
    -webkit-box-shadow: $left $top $blur $color;
    -moz-box-shadow: $left $top $blur $color;
    box-shadow: $left $top $blur $color;
  }
}


/*
* Just a standard animate thing for links etc,
* more complex keyframe animations deserve their own attention below this
*/

@mixin animate($duration,$delay) {


	-webkit-transition: all $duration cubic-bezier(0, 0, 0.2, 1) $delay;
  	-moz-transition: all $duration cubic-bezier(0, 0, 0.2, 1) $delay;
  	-o-transition: all $duration cubic-bezier(0, 0, 0.2, 1) $delay;
  	transition: all $duration cubic-bezier(0, 0, 0.2, 1) $delay;

}





@mixin prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin transition($transition: 0.1s all) {
  @include prefix('transition', #{$transition});
}

@mixin transform($transform) {
  @include prefix('transform', #{$transform});
}

@-webkit-keyframes fadeIn {
  0% {
    @include opacity(0);
    @include transform('scale(0.85,0.85)');
  }

  100% {
    @include opacity(1);
    @include transform('scale(1.0,1.0)');
  }
}
@-moz-keyframes fadeIn {
  0% {
    @include opacity(0);
    @include transform('scale(0.85,0.85)');
  }

  100% {
    @include opacity(1);
    @include transform('scale(1.0,1.0)');
  }
}
@-o-keyframes fadeIn {
  0% {
    @include opacity(0);
    @include transform('scale(0.85,0.85)');
  }

  100% {
    @include opacity(1);
    @include transform('scale(1.0,1.0)');
  }
}
@keyframes fadeIn {
  0% {
    @include opacity(0);
    @include transform('scale(0.85,0.85)');
  }

  100% {
    @include opacity(1);
    @include transform('scale(1.0,1.0)');
  }
}



@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    animation:         $animations;
}

@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }
    @-moz-keyframes #{$animationName} {
        @content;
    }
    @-o-keyframes #{$animationName} {
        @content;
    }
    @keyframes #{$animationName} {
        @content;
    }
}



@mixin bgimage {
  background-repeat: no-repeat;
  background-position: center;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
}


/*  Mixin for - border-image
    
    $border-image([$image-url], [$offsets], [$repeats])
    
    Example:
    @include border-image("border.png", 100%, 1, 0, stretch);

---------------------------------------- */
@mixin border-image($source, $slice, $width, $outset, $repeat) {
  border-image-source: url($source);
  border-image-slice: $slice;
  border-image-width: $width;
  border-image-outset: $outset;
  border-image-repeat: $repeat;
  -webkit-border-image: url($source) $slice $width $outset $repeat;
  -o-border-image: url($source) $slice $width $outset $repeat;
}


@mixin border-radius($radius:5px){
    @if length($radius) != 1 {
        $i:1;
        //covers older modzilla browsers
        @each $position in (topleft, topright, bottomright, bottomright) {
            -moz-border-radius-#{$position}:nth($radius, $i);
            $i:$i+1;
        }
        //Covers webkit browsers
        -webkit-border-radius:nth($radius, 1) nth($radius, 2) nth($radius, 3) nth($radius, 4);
        //Standard CSS3
        border-radius: nth($radius, 1) nth($radius, 2) nth($radius, 3) nth($radius, 4);
    } @else {
        -webkit-border-radius: $radius;
        -moz-border-radius: $radius;
        border-radius: $radius;
        -khtml-border-radius: $radius;
    }
}




@include keyframes(fadeIn) {
  from {
    @include transform(translateY(-20px));
    opacity: 0;
  }
  to {
    @include transform(translateY(0));
    opacity: 1;
  }
}

@mixin animation--fadedown($delay) {
  // Apply the fadeIn keyframes. Each animation 
  // will take 0.3s and have an ease-in-out
  @include animation(fadeIn 0.3s ease-in-out);
  // This animation should only play once
  @include animation-iteration-count(1);
  // Make sure the element maintains it's 
  // final visual state (i.e. 100% opacity)
  @include animation-fill-mode(forwards);
  // Delay - don't start the animation until we say so
  @include animation-delay(#{$delay}s);
}




// 360 spin shit

@include keyframes(spinOut) {
  from {
    @include transform(rotate(0deg));
  }
  to {
    @include transform(rotate(-360deg));
  }
}

@mixin animation--spinout($delay) {
  // Apply the fadeIn keyframes. Each animation 
  // will take 0.3s and have an ease-in-out
  @include animation(spinOut 0.3s ease-in-out);
  // This animation should only play once
  @include animation-iteration-count(1);
  // Make sure the element maintains it's 
  // final visual state (i.e. 100% opacity)
  @include animation-fill-mode(forwards);
  // Delay - don't start the animation until we say so
  @include animation-delay(#{$delay}s);
}